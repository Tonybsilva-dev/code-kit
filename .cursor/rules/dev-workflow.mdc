---
description: Diretrizes a serem seguidas para todas as seções de desenvolvimento
globs: **/*
alwaysApply: true
---

## Diretrizes de desenvolvimento

- **Contexto de Tarefas (Taskmaster MCP/CLI)**
  - Sempre que houver uma tarefa, utilize o contexto de tarefas via MCP (preferido) ou CLI.
  - Inicie listando e entendendo o próximo item: `list`, `next`, `show <id>`.
  - Para tarefas complexas, use `expand`/`expand-all` e `analyze-complexity` antes de implementar.
  - Sugira melhorias alinhadas a práticas amplamente usadas no mercado norte‑americano.
  - Referências: [dev_workflow.mdc](mdc:.cursor/rules/taskmaster/dev_workflow.mdc), [taskmaster.mdc](mdc:.cursor/rules/taskmaster/taskmaster.mdc).

- **Fluxo padrão de execução (loop)**
  - **Planejar**: `list` → `next` → `show <id>`
  - **Detalhar**: `expand <id>` (ou `expand-all`) e, se aplicável, `analyze-complexity --research`
  - **Implementar**: codar seguindo requisitos e padrões do repositório
  - **Registrar**: `update-subtask` (progresso) e `set-status` (in-progress/done)
  - **Revisar**: atualizar tarefas dependentes com `update`/`update-task` quando houver desvio de implementação

- **Baseline de Qualidade obrigatória**
  - Execute `npm run qa` antes de começar qualquer implementação e ANTES de cada commit.
  - O comando deve rodar: lint (ESLint), type-check (tsc), testes (Vitest) e pode incluir cobertura.
  - Exemplo:

    ```bash
    npm run qa
    ```

- **Commits disciplinados**
  - Faça commit somente após `npm run qa` bem-sucedido.
  - Mensagens claras, curtas e descritivas. Prefira Conventional Commits.
  - Quando relacionado a tarefa/subtarefa do Taskmaster, referencie o ID (ex.: `ref task: 21.2`).
  - Exemplo:

    ```bash
    git add . && git commit -m "ci: adiciona workflow base de CI (ref task: 21.1)"
    ```

- **Log de desenvolvimento**
  - Após cada entrega, crie um arquivo em `dev-logs/` com data e resumo das mudanças.
  - Estrutura sugerida: título, contexto, mudanças, impacto, próximos passos.
  - Exemplo: `dev-logs/2025-09-26-dev-workflow.md`.

- **Quando NÃO houver tarefa**
  - Colete escopo mínimo (impacto, arquivos) antes de iniciar.
  - Crie TODOs e siga o mesmo ciclo (QA → commit → log).

- **Padrões de Regra (consistência entre arquivos)**
  - Siga o formato definido em [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc): cabeçalho (description, globs, alwaysApply), seções com visão geral, requisitos acionáveis, exemplos, referências.
  - Use bullets; destaque pontos principais em negrito.
  - Referencie arquivos reais via `mdc:` (ex.: [schema.prisma](mdc:prisma/schema.prisma)).

- **Integrações e referências deste repositório**
  - **CI (GitHub Actions)**: [ci.yml](mdc:.github/workflows/ci.yml), [codeql.yml](mdc:.github/workflows/codeql.yml)
  - **Qualidade**: [eslint.config.js](mdc:eslint.config.js), [tsconfig.json](mdc:tsconfig.json)
  - **Testes**: [vitest.config.ts](mdc:tests/vitest.config.ts), [smoke.test.ts](mdc:tests/smoke.test.ts)
  - **Husky**: [.husky/pre-push](mdc:.husky/pre-push)
  - **Dependabot**: [dependabot.yml](mdc:.github/dependabot.yml)

- **Checklists rápidas**
  - **Ciclo de dev**
    - [ ] Rodar `npm run qa` (baseline)
    - [ ] Criar/atualizar TODOs (Taskmaster)
    - [ ] Implementar seguindo padrões do projeto
    - [ ] Rodar `npm run qa` (pré‑commit)
    - [ ] Commitar com mensagem clara (referenciar tarefa quando houver)
    - [ ] Criar log em `dev-logs/` com resumo do impacto
  - **CI (PRs)**
    - [ ] Lint passou (job `lint`)
    - [ ] Type-check passou (job `typecheck`)
    - [ ] Testes passaram e cobertura gerada (job `test` + Codecov)

- **Exemplos práticos (DO / DON'T)**
  - DO: Executar QA antes e depois de alterações

    ```bash
    npm run qa
    ```

  - DO: Registrar progresso em subtarefas (MCP)

    ```bash
    # Ex.: marcar subtask como in-progress
    # (via MCP) set-status --id=21.2 --status=in-progress
    ```

  - DON'T: Comitar com lint quebrado ou testes falhando

    ```bash
    # Evite commits sem rodar QA
    git commit -m "wip: alterações"  # ❌
    ```

- **Manutenção contínua das regras**
  - Atualize quando surgirem padrões recorrentes, novas libs ou melhores práticas.
  - Inclua exemplos reais do código; remova trechos desatualizados.
  - Cruze referências entre regras relacionadas para manter DRY.

- **Qualidade do conteúdo**
  - Regras específicas e acionáveis.
  - Prefira exemplos reais do código às descrições genéricas.
  - Mantenha consistência de formatação e linguagem.
